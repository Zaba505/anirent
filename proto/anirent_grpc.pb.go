// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnirentClient is the client API for Anirent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnirentClient interface {
	// Search
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Anirent_SearchClient, error)
	// Download
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	// Subscribe
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (Anirent_SubscribeClient, error)
}

type anirentClient struct {
	cc grpc.ClientConnInterface
}

func NewAnirentClient(cc grpc.ClientConnInterface) AnirentClient {
	return &anirentClient{cc}
}

func (c *anirentClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Anirent_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Anirent_ServiceDesc.Streams[0], "/proto.Anirent/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &anirentSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Anirent_SearchClient interface {
	Recv() (*SearchResult, error)
	grpc.ClientStream
}

type anirentSearchClient struct {
	grpc.ClientStream
}

func (x *anirentSearchClient) Recv() (*SearchResult, error) {
	m := new(SearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *anirentClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/proto.Anirent/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anirentClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (Anirent_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Anirent_ServiceDesc.Streams[1], "/proto.Anirent/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &anirentSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Anirent_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type anirentSubscribeClient struct {
	grpc.ClientStream
}

func (x *anirentSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnirentServer is the server API for Anirent service.
// All implementations must embed UnimplementedAnirentServer
// for forward compatibility
type AnirentServer interface {
	// Search
	Search(*SearchRequest, Anirent_SearchServer) error
	// Download
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	// Subscribe
	Subscribe(*Subscription, Anirent_SubscribeServer) error
	mustEmbedUnimplementedAnirentServer()
}

// UnimplementedAnirentServer must be embedded to have forward compatible implementations.
type UnimplementedAnirentServer struct {
}

func (UnimplementedAnirentServer) Search(*SearchRequest, Anirent_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedAnirentServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedAnirentServer) Subscribe(*Subscription, Anirent_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAnirentServer) mustEmbedUnimplementedAnirentServer() {}

// UnsafeAnirentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnirentServer will
// result in compilation errors.
type UnsafeAnirentServer interface {
	mustEmbedUnimplementedAnirentServer()
}

func RegisterAnirentServer(s grpc.ServiceRegistrar, srv AnirentServer) {
	s.RegisterService(&Anirent_ServiceDesc, srv)
}

func _Anirent_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnirentServer).Search(m, &anirentSearchServer{stream})
}

type Anirent_SearchServer interface {
	Send(*SearchResult) error
	grpc.ServerStream
}

type anirentSearchServer struct {
	grpc.ServerStream
}

func (x *anirentSearchServer) Send(m *SearchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Anirent_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnirentServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Anirent/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnirentServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Anirent_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnirentServer).Subscribe(m, &anirentSubscribeServer{stream})
}

type Anirent_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type anirentSubscribeServer struct {
	grpc.ServerStream
}

func (x *anirentSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// Anirent_ServiceDesc is the grpc.ServiceDesc for Anirent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Anirent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Anirent",
	HandlerType: (*AnirentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _Anirent_Download_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _Anirent_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Anirent_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "anirent.proto",
}
